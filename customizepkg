#!/bin/bash
#
# customizepkg => modify PKGBUILD before building
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program; if not, write to the Free Software
#   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#

NAME=$(basename $0)
CONFIGDIR="/etc/${NAME}.d"
LOCALCONFIGDIR="${HOME}/.${NAME}"

usage() {
   echo "Without any option, ${NAME} read PKGBUILD in current directory and show a diff between original PKGBUILD and customized PKGBUILD."
   echo "${NAME} read configuration in ~/.${NAME}/\${pkgname} or /etc/${NAME}.d/\${pkgname} file"
   echo
   echo "usage: ${NAME} <option>"
   echo
   echo "${NAME} --help,    -h       shows this help"
   echo "${NAME} --modify,  -m       apply the modification in PKGBUILD file"
   echo "${NAME} --vimdiff, -v       show diff between customised file and original file with vimdiff"
   echo
   echo "see /etc/${NAME}.d/mplayer.example for example"
   echo
   echo "originally written by <wain@archlinux.fr>"
   echo "+ modifications by ava1ar (customizepkg-new)"
   echo "+ modifications by Steven Honeyman"
}

modify_file()
{
	configfile=$1
	originalscriptfile=$2
	scriptfile=$3

	grep --invert-match "\(^#\|^$\)" ${configfile} |
	while IFS='#' read -r action context pattern value; do
		case ${action} in
			remove|replace)
				[[ ${action} == remove ]] && echo "=> removes '${pattern}' in ${context}" || echo "=> replaces '${pattern}' with '${value}' in ${context}"
				if [ "${action}" = "replace" -a "${context}" != "global" ]; then
					value="$(echo ${value} | tr -d "\'")"
				fi
				if [ "${context}" = "global" ]; then
					sed -i "s+${pattern}+${value}+g" "${scriptfile}"
				else
					pattern="${pattern}[<>=]*[a-z0-9.{$}]*[\"' ]"
					if [ "${action}" = "replace" ]; then
						[[ ${context} == "build" ]] || [[ ${context} == "prepare" ]] || [[ ${context} == "package" ]] &&
							sed -i "/^${context}() {/,/}$/ s+${pattern}+${value}+g" "${scriptfile}" ||
							sed -i "/^${context}=/,/)$/ s+${pattern}+${value}+g" "${scriptfile}"
					else
						sed -i "/^${context}=/,/)$/ s+[[:blank:]]*['\"]*${pattern}['\"]*+${value} +g" "${scriptfile}"
					fi
				fi
				;;
			removeline)
				echo "=> remove whole line containing '${pattern}' in ${context}"
				if [ "${context}" = "global" ]; then
					sed -i "/${pattern}/d" "${scriptfile}"
				else
					pattern="${pattern}[<>=]*[a-z0-9.{$}]"
					sed -i "/^${context}() {/,/}$/ { /${pattern}/d }" "${scriptfile}"
				fi
				;;
			add)
				value="'$(echo ${pattern} | tr -d "\'")'"
				echo "=> adds ${value} in ${context}"
				# add the full line if it doesn't exist or just the value
				if grep --quiet "^${context}=" "${scriptfile}"; then
					sed -i "s+^${context}=(+&${value} +1" "${scriptfile}"
				else
					sed -i "/^pkgname/i${context}=(${value})\n" "${scriptfile}"
				fi
				;;
			*)
				echo "error: unknown action '${action}'"
				;;
		esac
	done
	[ ${VIMDIFF} -eq 1 ] && vim -d "${scriptfile}" "${originalscriptfile}"
	diff -Naur "${originalscriptfile}" "${scriptfile}"
	return 0
}

eval_script()
{
	configfile=$1
	originalscriptfile=$2
	scriptfile=$3

	if [ -x "${configfile}" ]; then
		echo "=> ${configfile} is executable, so treating it as a script instead of config"
		"${configfile}" "${originalscriptfile}" "${scriptfile}" || exit 1
	else
		cp ${configfile} ./${package}.customize
	fi
}

########################
# Main Program
VIMDIFF=0
MODIFY=0
while [ "$#" -ne "0" ]; do
	case $1 in
		-h|--help)
			usage
			exit 0
			;;
		--version|-V) version;;
		-m|--modify)
			MODIFY=1
			;;
		--vimdiff|-v)
			[[ $(type -p vim) ]] && VIMDIFF=1 || echo 'vim was not found'
			;;
	esac
	shift
done

if [ ! -r ./PKGBUILD ]; then
	echo "PKGBUILD not found"
	exit 1
fi

# use eval instead of creating a temp file to get pkgname etc
eval $(grep -e '^[[:blank:]]*pkg.*=' ./PKGBUILD)

for package in "${pkgname[@]}"
do
	# local user prefs take priority
	if [ -r "${LOCALCONFIGDIR}/${package}" ]; then
		CONFIGDIR=${LOCALCONFIGDIR}
	elif [ ! -r "${CONFIGDIR}/${package}" ]; then
		echo "no configuration found for ${package} in ${LOCALCONFIGDIR}/ or ${CONFIGDIR}/"
		continue
	fi

	eval_script "${CONFIGDIR}/${package}" "./PKGBUILD" "./PKGBUILD.custom"

	[[ -d  "${LOCALCONFIGDIR}/${package}.files" ]] && CFGDIR=${LOCALCONFIGDIR} || CFGDIR=${CONFIGDIR}
	#adding new files current dir from  ${CFGDIR}/${package} folder and including them to PKGBUILD
	if [ -d  "${CFGDIR}/${package}.files" ]; then
		# find checksum type used in PKGBUILD and utility to calculate the sum for added files
		checksum_context=$(grep -om 1 "^[a-z]*[0-9]*sums" "./PKGBUILD")
		checksum_utility=${checksum_context%?}
		echo "=> files from ${CFGDIR}/${package}.files will be included into package "
		for filepath in ${CFGDIR}/${package}.files/*; do
			if [[ -f ${filepath} ]]; then
				filename=$(basename ${filepath})
				echo -e "${filename}... \c"
				cp "${filepath}" ./${filename} 2> /dev/null
				if [[ $? -eq 0 ]];
					then
						echo "add#source#${filename}" >> ./${package}.customize
						echo "add#${checksum_context}#$(${checksum_utility} < ./${filename} | cut -d" " -f1)" >> ./${package}.customize
						echo "included"
					else
						echo "already exists. Skipping..."
				fi
				if [ ${MODIFY} -eq 0 ]; then
					rm ./${filename}
				fi
			fi
		done
	fi

	#TODO: PKGBUILD + file.install
	cp ./PKGBUILD ./PKGBUILD.custom
	modify_file "./${package}.customize" "./PKGBUILD" "./PKGBUILD.custom" || exit 1
	if [ ${MODIFY} -eq 1 ]; then
		cp ./PKGBUILD ./PKGBUILD.original
		cp ./PKGBUILD.custom ./PKGBUILD
	else rm ./PKGBUILD.custom
	fi
	rm -f ./${package}.customize
done

exit 0
